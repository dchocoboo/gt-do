service: node-dynamodb-todo

frameworkVersion: ">=1.1.0 <=2.4.0"

plugins:
  - serverless-cloudformation-sub-variables
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing
  - serverless-associate-waf
  # ---- for testing
  - serverless-dynamodb-local
  # has to be on the very end
  - serverless-offline

custom:
  dynamodbArn: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
  executionRolePrefix: "${self:service}-${opt:stage, self:provider.stage}-${self:provider.region}"
  # firewall to be associated here
  associateWaf:
    name: "${self:service}-${opt:stage, self:provider.stage}-WebACL"
    version: V2
  # for dynamodb-local testing below
  dynamodb:
    # only run this two for offline testing
    stages:
      - test
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
      # Comment if you don't have a DynamoDB running locally
      # noStart: false
    # migration:
    #   dir: serverless/offline/migrations

provider:
  name: aws
  region: ap-southeast-1
  runtime: nodejs12.x
  tracing: true
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  logRetentionInDays: 365 # 1 year
  # use the kms generated by the resources below
  kmsKeyArn:
    "Fn::GetAtt": [TodosKMSKey, Arn]
  iamRoleStatements:
    - Effect: "Allow" # xray permissions (required)
      Action:
        - "xray:PutTraceSegments"
        - "xray:PutTelemetryRecords"
      Resource:
        - "*"

functions:
  create:
    handler: src/todos/create.create
    events:
      - http:
          path: todos
          method: post
          cors: true
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: "${self:custom.dynamodbArn}"

  list:
    handler: src/todos/list.list
    events:
      - http:
          path: todos
          method: get
          cors: true
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: "${self:custom.dynamodbArn}"

  get:
    handler: src/todos/get.get
    events:
      - http:
          path: todos/{id}
          method: get
          cors: true
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: "${self:custom.dynamodbArn}"

  update:
    handler: src/todos/update.update
    events:
      - http:
          path: todos/{id}
          method: put
          cors: true
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: "${self:custom.dynamodbArn}"

  delete:
    handler: src/todos/delete.delete
    events:
      - http:
          path: todos/{id}
          method: delete
          cors: true
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: "${self:custom.dynamodbArn}"

resources:
  - ${file(serverless/kms.yml)}
  - ${file(serverless/waf.yml)}
  - ${file(serverless/dynamo.yml)}